/*

Apple App Store Analysis

OVERVIEW -
This portfolio project showcases my skills in SQL and data analysis by examining data from the Apple App Store. The goal of the project is to provide insights for aspiring app developers. The analysis will answer various business questions related to app categories, prices, ratings, and descriptions.

PROJECT DESCRIPTION -
The Apple App Store data is sourced from several CSV files, which contain various details about the apps. Using MySQL for data manipulation and analysis, I will import the CSV files, combine and join the data using the app "id" field as the key, and then analyze the combined data to answer the business questions. 

RESOURCES -
- Data Source: Original dataset is from Kaggle, but this project is inspired by this YouTube video: https://youtu.be/EKOWoInn46A, using a modified version of the original data, found here: https://drive.google.com/drive/folders/1_3upvRufarzFzW2I0YavucNFCR8bZrYn
- SQLiteOnline.com: Used as an IDE for this project

TECHNOLOGIES USED -
- SQLite: Used for data manipulation, combination, and analysis

AUTHOR INFORMATION- 
**Author:** Ernest Devaney
**Contact:** hello@ernestdevaney.com
**LinkedIn:** [Ernest Devaney](https://www.linkedin.com/in/ernest-devaney/)

Feel free to reach out if you have any questions or would like to discuss my approach to the Apple App Store data analysis!

*/


-- There are five .csv files in all which need to be imported. Four are quarters of a larger file, so I'll need to import and combine those. The other .csv file can be joined with a unique key.

-- I've imported the .csv files into my environment. Now to combine the four description files into one table.

CREATE TABLE app_store AS
SELECT * 
FROM appleStore_description1
UNION ALL
SELECT * 
FROM appleStore_description2
UNION ALL
SELECT * 
FROM appleStore_description3
UNION ALL
SELECT * 
FROM appleStore_description4;

-- Let's check to make sure that worked

SELECT * 
FROM app_store 
LIMIT 10;

-- Looks good. Now to check for null values.

SELECT * 
FROM app_store 
WHERE id IS NULL;

-- No nulls. Any duplicates? I'm going to group by id, and then see if any group contains more than one value.

SELECT id, COUNT(*) 
FROM app_store 
GROUP BY id 
HAVING COUNT(*) > 1;

-- No nulls, no duplicates. Let's do the same for the AppleStore table.

SELECT * 
FROM AppleStore 
WHERE id IS NULL;

SELECT id, COUNT(*) 
FROM AppleStore 
GROUP BY id 
HAVING COUNT(*) > 1;

-- Also looks good. Before joining the two tables, I want to make sure that the id's match between the two.

SELECT COUNT(*) FROM app_store;

-- result: 7197

SELECT COUNT(*) FROM AppleStore;

-- result: 7197

-- I'll check to see if either table contains any id's that aren't a match on the other.

SELECT id 
FROM app_store
EXCEPT 
SELECT id 
FROM AppleStore;

SELECT id 
FROM AppleStore
EXCEPT 
SELECT id 
FROM app_store;

-- Looks good all around, time to JOIN.

CREATE TABLE full_app_store AS
SELECT *
FROM app_store
JOIN AppleStore
ON app_store.id = AppleStore.id;

SELECT *
FROM full_app_store
LIMIT 10;

-- Joining the tables created three duplicate columns. I want to drop them but before I do, I'm just going to verify that they are fully duplicates.

SELECT *
FROM full_app_store
WHERE id != `id:1` 
  OR track_name != `track_name:1` 
  OR size_bytes != `size_bytes:1`;

-- I'm glad I checked. It looks like track_names has periods where it should have commas. I can't just replace all periods with commas as that'll turn Ms. PAC-MAN into Ms, PAC-MAN, etc. So, I'll keep the track_name:1 column

-- I'm going to create a new table without the duplicate columns.

CREATE TABLE app_store_cleaned AS
SELECT
  id,
  "track_name:1" AS track_name,
  size_bytes,
  app_desc,
  currency,
  price,
  rating_count_tot,
  rating_count_ver,
  user_rating,
  user_rating_ver,
  ver,
  cont_rating,
  prime_genre,
  sup_devices_num,
  ipadsc_urls_num,
  lang_num,
  vpp_lic
FROM full_app_store;

SELECT *
FROM app_store_cleaned
LIMIT 10;

-- Looks good! Now to start poking around, trying to answer some obvious questions. I'll start with -What are the most popular categories?

SELECT prime_genre, SUM(rating_count_tot) as total_ratings
FROM app_store_cleaned
GROUP BY prime_genre
ORDER BY total_ratings DESC;

-- Wow, lots of reviews for games! Let's look at the top ten results.
/*
Games - 52,878,491
Social Networking - 7,598,316
Photo & Video - 5,008,946
Entertainment - 4,030,518
Music - 3,980,199
Shopping - 2,271,070
Health & Fitness - 1,784,371
Utilities - 1,702,228
Sports - 1,599,070
Weather - 1,597,034
*/
-- Okay, so games are popular. Let's see what the ten highest-reviewed games are to see what the playing field looks like.

SELECT track_name, rating_count_tot
FROM app_store_cleaned
WHERE prime_genre = 'Games'
ORDER BY rating_count_tot DESC
LIMIT 10;

-- Most of these are what I'd refer to as legacy games. They also look like they're mainly from larger developers. That might make this category difficult to break into.

-- I'm going to look at the average review scores of paid versus free apps. I suspect paid apps will review higher as they may be more robust, and of course people tend to value things more when they have paid money for them.

SELECT 
    CASE 
        WHEN price = 0 THEN 'Free'
        ELSE 'Paid'
    END AS app_type,
    AVG(user_rating) AS avg_user_rating
FROM app_store_cleaned
GROUP BY app_type
ORDER BY avg_user_rating DESC;

-- The average user ratings are as follows: Paid apps - 3.72, Free apps - 3.38. I don't think this is useful. I'll get into why in a bit.

-- Let's see the average review score of the top 100 for both free and paid apps.

-- Average rating for the top 100 free apps
SELECT 'Free' AS app_type, AVG(user_rating) AS avg_user_rating
FROM (
  SELECT user_rating
  FROM app_store_cleaned
  WHERE price = 0
  ORDER BY user_rating DESC
  LIMIT 100
)
UNION ALL
-- Average rating for the top 100 paid apps
SELECT 'Paid' AS app_type, AVG(user_rating) AS avg_user_rating
FROM (
  SELECT user_rating
  FROM app_store_cleaned
  WHERE price > 0
  ORDER BY user_rating DESC
  LIMIT 100
);

-- The average rating for the top 100 free apps is 5, and the average rating for the top 100 paid apps is 5.
-- What is a free app? An app that is free to download, sure. But, it may require subscriptions or other in-app purchases to unlock functionality.
-- Does the distinction between paid and free mean what it may have years ago? Probably not.
-- Without more information, there's not much I can surmise from the average review scores between paid and free.
-- My suspicion is that free apps have a lower score on average because of the ocean of garbage apps released by app mills.
-- Without data such as user engagement metrics or even better, profit margins, I think this is a dead end. Moving on!

-- Just out of curiosity I'm going to see if certain categories have better overall review scores than others, again looking only at the top 100 in each category to avoid the garbage pit at the bottom. 

WITH RankedApps AS (
  SELECT 
      prime_genre,
      user_rating,
      ROW_NUMBER() OVER (PARTITION BY prime_genre ORDER BY user_rating DESC) AS rank_within_genre
  FROM app_store_cleaned
)
SELECT 
    prime_genre,
    AVG(user_rating) AS avg_rating
FROM RankedApps
WHERE rank_within_genre <= 100
GROUP BY prime_genre
ORDER BY avg_rating DESC;

-- Here are some results: The top 100 Games have an average rating of 5. Photo & Video - 4.65, Entertainment - 4.63, Health & Fitness - 4.62, Productivity - 4.62. The bottom five are: News - 2.98, Book - 2.78, Navigation - 2.68, Finance - 2.53, and Catalogs at a dismal 2.1.

-- Not to get off track but, 'Catalogs'? I have to see how many apps are in that category.

SELECT COUNT(track_name) AS num_apps, prime_genre
FROM app_store_cleaned
WHERE prime_genre = 'Catalogs';

-- Ten. Someone could be the eleventh in that category and really turn things around. But not today. 

-- I'm going to look into number of apps, number of reviews, and score averages for different price buckets.

SELECT 
  CASE
    WHEN price = 0 THEN 'Free'
    WHEN price > 0 AND price <= 0.99 THEN 'Low-Priced (0.01 - 0.99)'
    WHEN price > 0.99 AND price <= 2.99 THEN 'Moderate-Priced (1 - 2.99)'
    WHEN price > 2.99 AND price <= 4.99 THEN 'High-Priced (3 - 4.99)'
    ELSE 'Premium (5+)'
  END AS price_bracket,
  COUNT(*) AS number_of_apps,
  AVG(user_rating) AS avg_user_rating,
  SUM(rating_count_tot) AS total_reviews
FROM app_store_cleaned
GROUP BY price_bracket
ORDER BY 
  CASE 
    WHEN price_bracket = 'Free' THEN 1
    WHEN price_bracket = 'Low-Priced (0.01 - 0.99)' THEN 2
    WHEN price_bracket = 'Moderate-Priced (1 - 2.99)' THEN 3
    WHEN price_bracket = 'High-Priced (3 - 4.99)' THEN 4
    ELSE 5
  END;

-- Results: Unsurprisingly, there are more free apps than the rest combined. Of paid apps, most are in the 1-2.99 bracket. Apps in the 1-2.99 bracket as well as the 3-4.99 bracket have the highest average review scores at ~3.82 each. They are higher than the average review score for the 5+ bracket, which is 3.7.

-- Now let's look at language support.

SELECT 
  lang_num AS number_of_supported_languages,
  COUNT(*) AS number_of_apps
FROM app_store_cleaned
GROUP BY lang_num
ORDER BY number_of_supported_languages;

-- This shows us that most apps only have support for one language. Just over half the apps in this dataset, actually. 41 apps support zero languages. That's... Yeah. My guess is that the developers didn't check a box when submitting their app?

-- I want to put the number of languages supported into buckets so I can see how many reviews they have, and what the average score is.

SELECT 
  CASE
    WHEN lang_num = 1 THEN '1 Language'
    WHEN lang_num > 1 AND lang_num <= 5 THEN '2-5 Languages'
    WHEN lang_num > 5 AND lang_num <= 10 THEN '6-10 Languages'
    WHEN lang_num > 10 AND lang_num <= 20 THEN '11-20 Languages'
    ELSE '21+ Languages'
  END AS language_support_bracket,
  COUNT(*) AS number_of_apps,
  AVG(user_rating) AS avg_user_rating,
  SUM(rating_count_tot) AS total_reviews
FROM app_store_cleaned
GROUP BY language_support_bracket
ORDER BY 
  CASE 
    WHEN language_support_bracket = '1 Language' THEN 1
    WHEN language_support_bracket = '2-5 Languages' THEN 2
    WHEN language_support_bracket = '6-10 Languages' THEN 3
    WHEN language_support_bracket = '11-20 Languages' THEN 4
    ELSE 5
  END;

-- Between 11 and 20 languages seems to be the sweet spot here. There are a lot of apps in this bracket (1032) and they review well (avg 4.14). The next best review score is in the 6 - 10 bracket at 4.05. The worst average review score is for apps that support 2-5 languages, at 3.11.


-- So where does all of this leave us?


-- Review and Recommendations:

-- We've thoroughly explored the Apple App Store data and unearthed some valuable insights that can guide aspiring app developers. Here's a summary of our findings and actionable recommendations:

-- Categories:
--Finding: Games dominate the landscape, followed by Social Networking and Photo & Video.
--Recommendation: Consider targeting niche categories like Health & Fitness or Productivity, where competition might be lower but opportunities abound.

-- Price Point:
-- Finding: Apps priced between $1 - $4.99 receive favorable reviews, while free apps also hold a significant market share.
-- Recommendation: Positioning your app in the $1 - $4.99 range might hit the sweet spot in balancing profitability and attractiveness to users.

-- Language Support:
-- Finding: Apps supporting 11-20 languages seem to strike a balance between accessibility and favorable reviews.
-- Recommendation: If possible, aim for supporting multiple languages, focusing on 11-20 to increase global reach without overwhelming resources.

-- Content Ratings and Size:
-- Finding: We noticed variations across content ratings and app size but didn't delve deep into these aspects.
-- Recommendation: Future research could explore these factors, offering further insights for targeted development.

-- Limitations:
-- The dataset lacks information on user engagement and revenue, limiting our ability to make comprehensive profitability recommendations.
-- The distinction between "free" and "paid" might not fully capture the current market dynamics, with many free apps offering in-app purchases or subscriptions.

-- Final Thoughts:
-- Based on our analysis, an aspiring app developer looking to create a successful app might choose to focus on a niche category, price the app within a moderate range, and consider multi-language support. 
-- These insights offer a starting point, but understanding specific market dynamics, audience needs, and emerging trends will be essential for building a profitable and popular app.

-- Thank you for taking the time to explore this analysis of the Apple App Store. 
-- If you'd like to discuss this project further, explore collaboration opportunities, or consider how my skills might fit within your organization, please don't hesitate to reach out to me at hello@ernestdevaney.com or via LinkedIn.
-- I look forward to potentially working together!




















