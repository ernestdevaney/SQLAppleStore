/*

Apple App Store Analysis

OVERVIEW -
This portfolio project showcases my skills in SQL and data analysis by examining data from the Apple App Store. The goal of the project is to provide insights for aspiring app developers. The analysis will answer various business questions related to app categories, prices, ratings, and descriptions.

PROJECT DESCRIPTION -
The Apple App Store data is sourced from several CSV files, which contain various details about the apps. Using MySQL for data manipulation and analysis, I will import the CSV files, combine and join the data using the app "id" field as the key, and then analyze the combined data to answer the business questions. 

RESOURCES -
- Data Source: Original dataset is from Kaggle, but this project is inspired by this YouTube video: https://youtu.be/EKOWoInn46A, using a modified version of the original data, found here: https://drive.google.com/drive/folders/1_3upvRufarzFzW2I0YavucNFCR8bZrYn
- SQLiteOnline.com: Used as an IDE for this project

TECHNOLOGIES USED -
- SQLite: Used for data manipulation, combination, and analysis

AUTHOR INFORMATION- 
**Author:** Ernest Devaney
**Contact:** hello@ernestdevaney.com
**LinkedIn:** [Ernest Devaney](https://www.linkedin.com/in/ernest-devaney/)

Feel free to reach out if you have any questions or would like to discuss my approach to the Apple App Store data analysis!

*/


-- There are five .csv files in all which need to be imported. Four are quarters of a larger file, so I'll need to import and combine those. The other .csv file can be joined with a unique key.

-- I've imported the .csv files into my environment. Now to combine the four description files into one table.

CREATE TABLE app_store AS
SELECT * 
FROM appleStore_description1
UNION ALL
SELECT * 
FROM appleStore_description2
UNION ALL
SELECT * 
FROM appleStore_description3
UNION ALL
SELECT * 
FROM appleStore_description4;

-- Let's check to make sure that worked

SELECT * 
FROM app_store 
LIMIT 10;

-- Looks good. Now to check for null values.

SELECT * 
FROM app_store 
WHERE id IS NULL;

-- No nulls. Any duplicates? I'm going to group by id, and then see if any group contains more than one value.

SELECT id, COUNT(*) 
FROM app_store 
GROUP BY id 
HAVING COUNT(*) > 1;

-- No nulls, no duplicates. Let's do the same for the AppleStore table.

SELECT * 
FROM AppleStore 
WHERE id IS NULL;

SELECT id, COUNT(*) 
FROM AppleStore 
GROUP BY id 
HAVING COUNT(*) > 1;

-- Also looks good. Before joining the two tables, I want to make sure that the id's match between the two.

SELECT COUNT(*) FROM app_store;

-- result: 7197

SELECT COUNT(*) FROM AppleStore;

-- result: 7197

-- I'll check to see if either table contains any id's that aren't a match on the other.

SELECT id 
FROM app_store
EXCEPT 
SELECT id 
FROM AppleStore;

SELECT id 
FROM AppleStore
EXCEPT 
SELECT id 
FROM app_store;

-- Looks good all around, time to JOIN.

CREATE TABLE full_app_store AS
SELECT *
FROM app_store
JOIN AppleStore
ON app_store.id = AppleStore.id;

SELECT *
FROM full_app_store
LIMIT 10;

-- Joining the tables created three duplicate columns. I want to drop them but before I do, I'm just going to verify that they are fully duplicates.

SELECT *
FROM table_name
WHERE id != `id:1` 
  OR track_name != `track_name:1` 
  OR size_bytes != `size_bytes:1`;

-- I'm glad I checked. It looks like track_names has periods where it should have commas. I can't just replace all periods with commas as that'll turn Ms. PAC-MAN into Ms, PAC-MAN, etc. So, I'll keep the track_name:1 column

-- I'm going to create a new table without the duplicate columns.

CREATE TABLE app_store_cleaned AS
SELECT
	id,
  'track_name:1' AS track_name,
  size_bytes,
  app_desc,
  currency,
  price,
  rating_count_tot,
  rating_count_ver,
  user_rating,
  user_rating_ver,
  ver,
  cont_rating,
  prime_genre,
  sup_devices_num,
  ipadsc_urls_num,
  lang_num,
  vpp_lic
FROM full_app_store;

SELECT *
FROM app_store_cleaned
LIMIT 10;

























